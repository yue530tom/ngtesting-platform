<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ngtesting.platform.dao.CustomFieldDao">

    <select id="list" resultType="CustomField">
        SELECT * FROM "CustomField" o
        WHERE o."orgId"=#{orgId}

        <if test="keywords != null and keywords != ''">
            AND o.label LIKE '%${keywords}%'
        </if>
        <if test="applyTo != null and applyTo != ''">
            AND o."applyTo" = #{applyTo}
        </if>

        AND NOT o.disabled AND NOT o.deleted
        ORDER BY ordr ASC
    </select>

    <select id="listForCase" resultMap="customFieldMap">
        SELECT "customField".id,
               'cust-' || "customField".id "key",
               "customField".id            "fieldId",
               "customField"."colCode",
               "customField".label,
               "customField".type,
               "customField".input,
               "customField"."fullLine",
               "customField".required,
               "customField".readonly,
               false                       "buildIn",
               "customField".ordr,
               "customField"."orgId"

        FROM "CustomField" "customField"
        WHERE "customField"."orgId" = #{orgId}
          AND "customField"."applyTo" = 'test_case'
          AND NOT "customField".disabled
          AND NOT "customField".deleted
        ORDER BY "customField".ordr ASC
    </select>

    <select id="get" resultType="CustomField">
        SELECT *
        FROM "CustomField" o

        WHERE o.id = #{id}
          AND o."orgId" = #{orgId}
    </select>
    <select id="getDetail" resultMap="customFieldMap">
        SELECT *
        FROM "CustomField" o
        WHERE o.id = #{id}
          AND o."orgId" = #{orgId}
    </select>

    <insert id="save" parameterType="CustomField" useGeneratedKeys="true" keyProperty="id">
        insert into "CustomField" (label,
                                   "colCode",
                                   required,
                                   descr,
                                   "type",
                                   "input",
                                   "rows",
                                   "textFormat",
                                   "applyTo",
                                   "orgId",
                                   ordr,
                                   "buildIn",
                                   readonly,
                                   "fullLine",
                                   deleted,
                                   disabled,
                                   "createTime")
        values (#{label},
                #{colCode},
                #{required},
                #{descr},
                #{type},
                #{input},
                #{rows},
                #{textFormat},
                #{applyTo},
                #{orgId},
                #{ordr},
                #{buildIn},
                #{readonly},
                #{fullLine},
                FALSE,
                FALSE,
                NOW())
    </insert>

    <update id="update" parameterType="CustomField">
        UPDATE "CustomField"
        SET label = #{label},
            descr = #{descr},
            "type" = #{type},
            "input" = #{input},
            rows = #{rows},
            "textFormat" = #{textFormat},
            "applyTo" = #{applyTo},
            "fullLine" = #{fullLine},
            "orgId" = #{orgId},
            disabled = #{disabled},
            "updateTime" = NOW()

        WHERE id = #{id}
          AND "orgId" = #{orgId}
    </update>

    <delete id="delete">
        UPDATE "CustomField"
        SET deleted      = TRUE,
            "updateTime" = NOW()
        WHERE id = #{id}
          AND "orgId" = #{orgId}
    </delete>

    <select id="getPrev" resultType="CustomField">
        <![CDATA[
        SELECT *
        FROM "CustomField" o
        WHERE o.ordr < #{ordr}
          AND o."orgId" = #{orgId}
          AND o."applyTo" = #{applyTo}
          AND NOT o.deleted
        ORDER BY o.ordr DESC
        LIMIT 1
        ]]>
    </select>

    <select id="getNext" resultType="CustomField">
        <![CDATA[
        SELECT *
        FROM "CustomField" o
        WHERE o.ordr > #{ordr}
          AND o."orgId" = #{orgId}
          AND o."applyTo" = #{applyTo}
          AND NOT o.deleted
        ORDER BY o.ordr ASC
        LIMIT 1
        ]]>
    </select>

    <update id="setOrder">
        UPDATE "CustomField"
        SET ordr = #{ordr},
            "updateTime" = NOW()
        WHERE id = #{id}
          AND "orgId" = #{orgId}
    </update>

    <select id="getLastUnusedColumn" resultType="String">
        select cf."colCode"
        from "CustomField" cf

        where cf."orgId" = #{orgId}
          and NOT cf.deleted
          and NOT cf.disabled

        order by cf."colCode" asc
    </select>

    <select id="getMaxOrdrNumb" resultType="Integer">
        select max(ordr)
        from "CustomField" o
        where o."orgId" = #{orgId}
          AND o."applyTo" = #{applyTo}
          and NOT o.deleted
          and NOT o.disabled
    </select>

    <resultMap id="customFieldMap" type="com.ngtesting.platform.model.CustomField" autoMapping="true">
        <id column="id" property="id"/>

        <collection property="options" select="com.ngtesting.platform.dao.CustomFieldOptionDao.getByFieldId"
                    column="{id=id}">
        </collection>
    </resultMap>

    <select id="listInput" resultType="Map">
        SELECT o.id, o.label, o."value"
        FROM "CustomFieldIputDefine" o
        ORDER BY o.ordr
    </select>
    <select id="listType" resultType="Map">
        SELECT o.id, o.label, o."value"
        FROM "CustomFieldTypeDefine" o
        ORDER BY o.ordr
    </select>

    <select id="fetchInputMap" resultMap="inputMap">
        SELECT o.id, o.label, o."value"
        FROM "CustomFieldIputDefine" o
        ORDER BY o.ordr
    </select>

    <select id="listFieldTypeByInput" resultType="Map">
        SELECT o.id, o.label, o."value"
        FROM "CustomFieldTypeDefine" o
                 JOIN "CustomFieldInputTypeRelationDefine" r ON o."value" = r."typeValue"

        WHERE r."inputValue" = #{value}

        ORDER BY o.ordr
    </select>

    <resultMap id="inputMap" type="java.util.Map" autoMapping="true">
        <id column="value" property="value"/>

        <collection property="types" select="listFieldTypeByInput"
                    column="{value=value}">
        </collection>
    </resultMap>


</mapper>
